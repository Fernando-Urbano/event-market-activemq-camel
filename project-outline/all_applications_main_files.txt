All the applications main files:

================================================================================

FILE NAME: project-outline/applications-outline/event_market_user_creation_camel.txt

Camel connection

================================================================================

FILE NAME: event-market-user-creation/src/main/java/camelinaction/UserCreationProducer.java

package camelinaction;

import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;

import javax.jms.ConnectionFactory;

public class UserCreationProducer {
    private static String noopOption = "";

    public static void main(String[] args) throws Exception {
        CamelContext context = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        context.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

        context.addRoutes(new RouteBuilder() {
            public void configure() {
                from("file:data/outbox" + noopOption)
                    .log("Sending message ${file:name}")
                    .to("jms:queue:notification.producer.user.creation.queue");
            }
        });

        context.start();
        Thread.sleep(30000);

        context.stop();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_abstract_input_file.txt

Input file

================================================================================

FILE NAME: event-market-abstract/src/main/java/eventmarketinput/EventMarketInput.java

package eventmarketinput;

import eventmarket.main.User;
import eventmarket.main.CreateDate;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class EventMarketInput {
    private EntityManagerFactory emf;
    private EntityManager em;
    private ObjectMapper objectMapper;

    public EventMarketInput() {
        emf = Persistence.createEntityManagerFactory("EventMarketPU");
        em = emf.createEntityManager();
        objectMapper = new ObjectMapper();
    }
    public static void main(String[] args) {
        // EventMarketInput userCreation = new EventMarketInput();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_notification_engine_camel.txt

Camel connection

================================================================================

FILE NAME: event-market-notification-engine/src/main/java/camelinaction/NotificationEngineProducer.java

package camelinaction;

import eventmarket.main.NotificationEngine;
import eventmarket.main.User;
import eventmarket.main.Creator;
import eventmarket.main.TicketRequest;
import eventmarket.main.Event;

import javax.jms.ConnectionFactory;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.Processor;
import org.apache.camel.Exchange;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class NotificationEngineProducer {
    private static EntityManagerFactory emf;
    private static EntityManager em;
    private static ObjectMapper objectMapper = new ObjectMapper();

    public static void main(String[] args) throws Exception {
        // Initialize JPA
        emf = Persistence.createEntityManagerFactory("EventMarketPU");
        em = emf.createEntityManager();

        Processor processor = new Processor() {
            public void process(Exchange exchange) throws Exception {
                String jsonMessage = exchange.getIn().getBody(String.class);
                @SuppressWarnings("unchecked")
                Map<String, Object> messageData = objectMapper.readValue(jsonMessage, Map.class);
                String messageType = (String) messageData.get("message");

                NotificationEngine notificationEngine = new NotificationEngine();
                User user = null;
                Creator creator = null;
                boolean isValidMessage = true;

                switch (messageType) {
                    case "user-creation":
                        int userId = (int) messageData.get("userId");
                        user = em.find(User.class, userId);
                        if (user != null) {
                            notificationEngine.userCreated(user);
                        } else {
                            isValidMessage = false;
                        }
                        break;
                    case "creator-creation":
                        int creatorId = (int) messageData.get("creatorId");
                        creator = em.find(Creator.class, creatorId);
                        if (creator != null) {
                            notificationEngine.creatorCreated(creator);
                        } else {
                            isValidMessage = false;
                        }
                        break;
                    case "ticket-payment-in-process":
                        userId = (int) messageData.get("userId");
                        user = em.find(User.class, userId);
                        if (user != null) {
                            int ticketRequestId = (int) messageData.get("ticketRequestId");
                            TicketRequest ticketRequest = em.find(TicketRequest.class, ticketRequestId);
                            notificationEngine.ticketPaymentInProcess(user, ticketRequest);
                        } else {
                            isValidMessage = false;
                        }
                        break;
                    case "ticket-payment-approved":
                        userId = (int) messageData.get("userId");
                        user = em.find(User.class, userId);
                        if (user != null) {
                            int ticketRequestId = (int) messageData.get("ticketRequestId");
                            TicketRequest ticketRequest = em.find(TicketRequest.class, ticketRequestId);
                            notificationEngine.ticketPaymentApproved(user, ticketRequest);
                        } else {
                            isValidMessage = false;
                        }
                        break;
                    case "ticket-payment-rejected":
                        userId = (int) messageData.get("userId");
                        user = em.find(User.class, userId);
                        if (user != null) {
                            int ticketRequestId = (int) messageData.get("ticketRequestId");
                            TicketRequest ticketRequest = em.find(TicketRequest.class, ticketRequestId);
                            notificationEngine.ticketPaymentRejected(user, ticketRequest);
                        } else {
                            isValidMessage = false;
                        }
                        break;
                    case "event-recommendation":
                        userId = (int) messageData.get("userId");
                        user = em.find(User.class, userId);
                        if (user != null) {
                            @SuppressWarnings("unchecked")
                            List<Integer> eventIds = (List<Integer>) messageData.get("eventIds");
                            List<Event> events = eventIds.stream().map(id -> em.find(Event.class, id)).collect(Collectors.toList());
                            notificationEngine.eventRecommendation(user, events);
                        } else {
                            isValidMessage = false;
                        }
                        break;
                    case "creator-update-event":
                        creatorId = (int) messageData.get("creatorId");
                        creator = em.find(Creator.class, creatorId);
                        if (creator != null) {
                            int eventId = (int) messageData.get("eventId");
                            Event event = em.find(Event.class, eventId);
                            notificationEngine.creatorEventUpdate(creator, event);
                        } else {
                            isValidMessage = false;
                        }
                        break;
                    case "event-creation":
                        creatorId = (int) messageData.get("creatorId");
                        creator = em.find(Creator.class, creatorId);
                        if (creator != null) {
                            int eventId = (int) messageData.get("eventId");
                            Event event = em.find(Event.class, eventId);
                            if (event != null) {
                                notificationEngine.eventCreated(creator, event);
                            } else {
                                isValidMessage = false;
                            }
                        } else {
                            isValidMessage = false;
                        }
                        break;
                    default:
                        isValidMessage = false;
                        break;
                }

                if (isValidMessage) {
                    String message = notificationEngine.getMessage();
                    if (message != null) {
                        Map<String, Object> notificationJson = new HashMap<>();
                        notificationJson.put("message", message);
                        notificationJson.put("email", notificationEngine.getRecipient());

                        if (user != null) {
                            notificationJson.put("receivesEmails", user.getReceivesEmails());
                            notificationJson.put("receivesPushs", user.getReceivesPushs());
                        } else if (creator != null) {
                            notificationJson.put("receivesEmails", true);
                            notificationJson.put("receivesPushs", true);
                        }

                        String notificationJsonString = objectMapper.writeValueAsString(notificationJson);
                        exchange.getIn().setHeader("validMessage", true);
                        exchange.getIn().setBody(notificationJsonString);
                    }
                } else {
                    // Route to dead letter queue
                    exchange.getIn().setHeader("validMessage", false);
                    exchange.getIn().setBody(jsonMessage);
                }
            }
        };

        // Create Camel context
        CamelContext context = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        context.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

        // Add routes
        context.addRoutes(new RouteBuilder() {
            public void configure() {
                from("jms:queue:notification.producer.user.creation.queue")
                    .process(processor)
                    .choice()
                        .when(header("validMessage").isEqualTo(false))
                            .to("jms:queue:notification.deadletter.queue")
                        .otherwise()
                            .to("jms:queue:notification.builder.user.creation.queue");

                from("jms:queue:notification.producer.creator.creation.queue")
                    .process(processor)
                    .choice()
                        .when(header("validMessage").isEqualTo(false))
                            .to("jms:queue:notification.deadletter.queue")
                        .otherwise()
                            .to("jms:queue:notification.builder.creator.creation.queue");

                from("jms:queue:notification.producer.event.creation.queue")
                    .process(processor)
                    .choice()
                        .when(header("validMessage").isEqualTo(false))
                            .to("jms:queue:notification.deadletter.queue")
                        .otherwise()
                            .to("jms:queue:notification.builder.event.creation.queue");

                from("jms:queue:notification.producer.ticketpayment.inprocess.queue")
                    .process(processor)
                    .choice()
                        .when(header("validMessage").isEqualTo(false))
                            .to("jms:queue:notification.deadletter.queue")
                        .otherwise()
                            .to("jms:queue:notification.builder.ticketpayment.inprocess.queue");

                from("jms:queue:notification.producer.ticketpayment.rejected.queue")
                    .process(processor)
                    .choice()
                        .when(header("validMessage").isEqualTo(false))
                            .to("jms:queue:notification.deadletter.queue")
                        .otherwise()
                            .to("jms:queue:notification.builder.ticketpayment.rejected.queue");

                from("jms:queue:notification.producer.ticketpayment.approved.queue")
                    .process(processor)
                    .choice()
                        .when(header("validMessage").isEqualTo(false))
                            .to("jms:queue:notification.deadletter.queue")
                        .otherwise()
                            .to("jms:queue:notification.builder.ticketpayment.approved.queue");

                from("jms:queue:notification.producer.recommendations.queue")
                    .process(processor)
                    .choice()
                        .when(header("validMessage").isEqualTo(false))
                            .to("jms:queue:notification.deadletter.queue")
                        .otherwise()
                            .to("jms:queue:notification.builder.recommendations.queue");
            }
        });

        // Start the context
        context.start();
        Thread.sleep(500000);

        // Stop the context
        context.stop();

        // Close JPA
        em.close();
        emf.close();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_financial_validation_camel.txt

Camel connection

================================================================================

FILE NAME: event-market-financial-validation/src/main/java/camelinaction/FinancialValidationProducer.java

package camelinaction;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.activemq.ActiveMQConnectionFactory;

import javax.jms.ConnectionFactory;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import eventmarket.main.FinancialValidator;
import eventmarket.main.TicketRequest;

public class FinancialValidationProducer {

    public static void main(String[] args) throws Exception {
        CamelContext context = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        context.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() {
                from("jms:queue:ticketvalidation.financial.queue")
                    .process(new Processor() {
                        private Random random = new Random();
                        private EntityManagerFactory emf = Persistence.createEntityManagerFactory("EventMarketPU");
                        private EntityManager em = emf.createEntityManager();
                        private ObjectMapper objectMapper = new ObjectMapper();

                        @Override
                        public void process(Exchange exchange) throws Exception {
                            // Parse the message body to a Map
                            String bodyString = exchange.getIn().getBody(String.class);
                            @SuppressWarnings("unchecked")
                            Map<String, Object> body = objectMapper.readValue(bodyString, Map.class);

                            FinancialValidator financialValidator = FinancialValidator.getInstance();
                            int ticketRequestId = (int) body.get("ticketRequestId");
                            TicketRequest ticketRequest = em.find(TicketRequest.class, ticketRequestId);
                            boolean financiallyValid = financialValidator.requestValidation(ticketRequest);

                            // Additional random validation step
                            if (financiallyValid) {
                                financiallyValid = random.nextBoolean();
                                if (!financiallyValid) {
                                    financiallyValid = random.nextBoolean();
                                }
                            }

                            body.put("financiallyValid", financiallyValid);
                            exchange.getIn().setBody(body);
                        }
                    })
                    .choice()
                        .when(simple("${body[financiallyValid]} == true"))
                            .log("Ticket is financially valid. Sending to ticketvalidation.completion.queue")
                            .to("jms:queue:ticketvalidation.completion.queue")
                        .otherwise()
                            .log("Ticket is not financially valid. Sending to notification.producer.ticketpayment.rejected.queue")
                            .process(new Processor() {
                                @Override
                                public void process(Exchange exchange) throws Exception {
                                    @SuppressWarnings("unchecked")
                                    Map<String, Object> body = exchange.getIn().getBody(Map.class);
                                    Map<String, Object> rejectedMessage = new HashMap<>();
                                    rejectedMessage.put("message", "ticket-payment-rejected");
                                    rejectedMessage.put("userId", body.get("userId"));
                                    rejectedMessage.put("ticketRequestId", body.get("ticketRequestId"));
                                    exchange.getIn().setBody(rejectedMessage);
                                }
                            })
                            .to("jms:queue:notification.producer.ticketpayment.rejected.queue");
            }
        });

        context.start();
        Thread.sleep(30000);

        context.stop();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_ticket_purchase_input_file.txt

Input file

================================================================================

FILE NAME: event-market-ticket-purchase/src/main/java/eventmarketinput/EventMarketInput.java

package eventmarketinput;

import eventmarket.main.User;
import eventmarket.main.CreateDate;
import eventmarket.main.Event;
import eventmarket.main.TicketType;
import eventmarket.main.CardPayment;
import eventmarket.main.CheckingAccountPayment;
import eventmarket.main.PaymentMethod;
import eventmarket.main.FinancialInformation;
import eventmarket.main.Recipient;
import eventmarket.main.TicketRequest;

import com.fasterxml.jackson.databind.ObjectMapper;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class EventMarketInput {
    private EntityManagerFactory emf;
    private EntityManager em;
    private ObjectMapper objectMapper;

    public EventMarketInput() {
        emf = Persistence.createEntityManagerFactory("EventMarketPU");
        em = emf.createEntityManager();
        objectMapper = new ObjectMapper();
    }

    public void createTicketRequests() {
        em.getTransaction().begin();

        User user1 = findUserByEmail("elvis@outlook.com");
        User user2 = findUserByEmail("airton@gmail.com");
        User user3 = findUserByEmail("charlie@gmail.com");

        addCardPaymentToUser(user1, "1234567890123456", "John Doe", CreateDate.createDate(2025, 12, 1), "123");
        addCheckingAccountPaymentToUser(user2, "987654321", "123456789");
        addCardPaymentToUser(user3, "3456789012345678", "Mike Jones", CreateDate.createDate(2027, 10, 1), "789");

        Event event1 = findEventByName("Beach Bash");
        Event event2 = findEventByName("Symphony Under the Stars");
        Event event3 = findEventByName("Jazz in the Park");

        TicketType vipTicketType1 = findTicketType(event1, "VIP");
        TicketType generalTicketType1 = findTicketType(event1, "General Admission");

        TicketType vipTicketType2 = findTicketType(event2, "VIP");
        TicketType generalTicketType2 = findTicketType(event2, "General Admission");

        TicketType vipTicketType3 = findTicketType(event3, "VIP");
        TicketType generalTicketType3 = findTicketType(event3, "General Admission");

        FinancialInformation financialInformation1 = user1.getFinancialInformation().get(0);
        FinancialInformation financialInformation2 = user2.getFinancialInformation().get(0);
        FinancialInformation financialInformation3 = user3.getFinancialInformation().get(0);

        createTicketRequest(user1, vipTicketType1, financialInformation1);
        createTicketRequest(user2, generalTicketType1, financialInformation2);
        createTicketRequest(user3, vipTicketType2, financialInformation3);
        createTicketRequest(user1, generalTicketType2, financialInformation1);
        createTicketRequest(user2, vipTicketType3, financialInformation2);
        createTicketRequest(user3, generalTicketType3, financialInformation3);

        em.getTransaction().commit();

        em.close();
        emf.close();
    }

    private User findUserByEmail(String email) {
        TypedQuery<User> query = em.createQuery("SELECT u FROM User u WHERE u.email = :email", User.class);
        query.setParameter("email", email);
        return query.getSingleResult();
    }

    private Event findEventByName(String eventName) {
        TypedQuery<Event> query = em.createQuery("SELECT e FROM Event e WHERE e.name = :name", Event.class);
        query.setParameter("name", eventName);
        return query.getSingleResult();
    }

    private TicketType findTicketType(Event event, String ticketTypeName) {
        TypedQuery<TicketType> query = em.createQuery("SELECT t FROM TicketType t WHERE t.event = :event AND t.name = :name", TicketType.class);
        query.setParameter("event", event);
        query.setParameter("name", ticketTypeName);
        return query.getSingleResult();
    }

    private void addCardPaymentToUser(User user, String cardNumber, String cardHolder, java.util.Date expiryDate, String cvv) {
        PaymentMethod paymentMethod = new CardPayment(cardNumber, cardHolder, expiryDate, cvv);
        em.persist(paymentMethod);

        FinancialInformation financialInformation = new FinancialInformation(paymentMethod);
        financialInformation.setUser(user);
        user.addFinancialInformation(financialInformation);
        em.persist(financialInformation);
    }

    private void addCheckingAccountPaymentToUser(User user, String accountNumber, String routingNumber) {
        PaymentMethod paymentMethod = new CheckingAccountPayment(accountNumber, routingNumber);
        em.persist(paymentMethod);

        FinancialInformation financialInformation = new FinancialInformation(paymentMethod);
        financialInformation.setUser(user);
        user.addFinancialInformation(financialInformation);
        em.persist(financialInformation);
    }

    private Recipient findRecipientByEmail(String email) {
        TypedQuery<Recipient> query = em.createQuery("SELECT r FROM Recipient r WHERE r.email = :email", Recipient.class);
        query.setParameter("email", email);
        return query.getResultStream().findFirst().orElse(null);
    }

    private void createTicketRequest(User user, TicketType ticketType, FinancialInformation financialInformation) {
        Recipient recipient = findRecipientByEmail(user.getEmail());
        if (recipient == null) {
            recipient = new Recipient(user);
            em.persist(recipient);
        }

        TicketRequest ticketRequest = new TicketRequest(recipient, financialInformation, ticketType);
        ticketRequest.setUser(user);
        user.saveTicketRequest(ticketRequest);
        em.persist(ticketRequest);

        writeFile(ticketRequest);
    }

    private void writeFile(TicketRequest ticketRequest) {
        try {
            File outboxDir = new File("data/outbox");
            if (!outboxDir.exists()) {
                outboxDir.mkdirs();
            }

            String formattedTicketRequestId = String.format("%010d", ticketRequest.getId());
            File ticketRequestFile = new File(outboxDir, "ticketRequest-" + formattedTicketRequestId + "-creation.json");

            Map<String, Object> jsonContent = new HashMap<>();
            jsonContent.put("ticketRequestId", ticketRequest.getId());
            jsonContent.put("userId", ticketRequest.getUser().getId());
            jsonContent.put("ticketPrice", ticketRequest.getTicketType().getPrice());
            jsonContent.put("message", "ticket-request-creation");

            try (FileWriter writer = new FileWriter(ticketRequestFile)) {
                objectMapper.writeValue(writer, jsonContent);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        EventMarketInput ticketPurchase = new EventMarketInput();
        ticketPurchase.createTicketRequests();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_creator_creation_input_file.txt

Input file

================================================================================

FILE NAME: event-market-creator-creation/src/main/java/eventmarketinput/EventMarketInput.java

package eventmarketinput;

import eventmarket.main.Creator;
import eventmarket.main.CreateDate;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class EventMarketInput {
    private EntityManagerFactory emf;
    private EntityManager em;
    private ObjectMapper objectMapper;

    public EventMarketInput() {
        emf = Persistence.createEntityManagerFactory("EventMarketPU");
        em = emf.createEntityManager();
        objectMapper = new ObjectMapper();
    }

    public void createCreators() {
        em.getTransaction().begin();

        Creator creator1 = new Creator("Summer Parties", "summerparties@music.com", "password");
        Creator creator2 = new Creator("Classic Music Concerts", "classicmusic@concerts.com", "password");
        Creator creator3 = new Creator("Charlie Music Festivals", "charliefest@gmail.com", "password");
        Creator creator4 = new Creator("Lollapaloza", "mainaccount@lollapaloza.com", "password");

        em.persist(creator1);
        em.persist(creator2);
        em.persist(creator3);
        em.persist(creator4);

        em.getTransaction().commit();

        writeFile(creator1);
        writeFile(creator2);
        writeFile(creator3);
        writeFile(creator4);

        em.close();
        emf.close();
    }

    private void writeFile(Creator creator) {
        try {
            File outboxDir = new File("data/outbox");
            if (!outboxDir.exists()) {
                outboxDir.mkdirs();
            }

            String formattedCreatorId = String.format("%010d", creator.getId());
            File creatorFile = new File(outboxDir, "creator-" + formattedCreatorId + "-creation.json");

            Map<String, Object> jsonContent = new HashMap<>();
            jsonContent.put("creatorId", creator.getId());
            jsonContent.put("message", "creator-creation");

            try (FileWriter writer = new FileWriter(creatorFile)) {
                objectMapper.writeValue(writer, jsonContent);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        EventMarketInput creatorCreation = new EventMarketInput();
        creatorCreation.createCreators();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_user_creation_input_file.txt

Input file

================================================================================

FILE NAME: event-market-user-creation/src/main/java/eventmarketinput/EventMarketInput.java

package eventmarketinput;

import eventmarket.main.User;
import eventmarket.main.CreateDate;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class EventMarketInput {
    private EntityManagerFactory emf;
    private EntityManager em;
    private ObjectMapper objectMapper;

    public EventMarketInput() {
        emf = Persistence.createEntityManagerFactory("EventMarketPU");
        em = emf.createEntityManager();
        objectMapper = new ObjectMapper();
    }

    public void createUsers() {
        em.getTransaction().begin();

        User user1 = new User("Elvis Presley", "elvis@outlook.com", "password", CreateDate.createDate(1997, 10, 16));
        User user2 = new User("Airton Senna", "airton@gmail.com", "password", CreateDate.createDate(1997, 10, 16));
        User user3 = new User("Charlie Leclerc", "charlie@gmail.com", "password", CreateDate.createDate(1997, 10, 16));
        User user4 = new User("Fernando Urbano", "fernando@uchicago.edu", "password", CreateDate.createDate(1997, 10, 16));

        user1.setReceivesEmails(false);
        user2.setReceivesPushs(false);
        user4.setReceivesEmails(false);
        user4.setReceivesPushs(false);

        em.persist(user1);
        em.persist(user2);
        em.persist(user3);
        em.persist(user4);

        em.getTransaction().commit();

        writeFile(user1);
        writeFile(user2);
        writeFile(user3);
        writeFile(user4);

        em.close();
        emf.close();
    }

    private void writeFile(User user) {
        try {
            File outboxDir = new File("data/outbox");
            if (!outboxDir.exists()) {
                outboxDir.mkdirs();
            }

            String formattedUserId = String.format("%010d", user.getId());
            File userFile = new File(outboxDir, "user-" + formattedUserId + "-creation.json");

            Map<String, Object> jsonContent = new HashMap<>();
            jsonContent.put("userId", user.getId());
            jsonContent.put("message", "user-creation");

            try (FileWriter writer = new FileWriter(userFile)) {
                objectMapper.writeValue(writer, jsonContent);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        EventMarketInput userCreation = new EventMarketInput();
        userCreation.createUsers();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_event_creation_input_file.txt

Input file

================================================================================

FILE NAME: event-market-event-creation/src/main/java/eventmarketinput/EventMarketInput.java

package eventmarketinput;

import eventmarket.main.Location;
import eventmarket.main.Creator;
import eventmarket.main.Event;
import eventmarket.main.TicketType;
import eventmarket.main.CreateDate;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class EventMarketInput {
    private EntityManagerFactory emf;
    private EntityManager em;
    private ObjectMapper objectMapper;

    public EventMarketInput() {
        emf = Persistence.createEntityManagerFactory("EventMarketPU");
        em = emf.createEntityManager();
        objectMapper = new ObjectMapper();
    }

    public void createEvents() {
        em.getTransaction().begin();

        Creator creator1 = findCreatorByEmail("summerparties@music.com");
        Creator creator2 = findCreatorByEmail("classicmusic@concerts.com");
        Creator creator3 = findCreatorByEmail("charliefest@gmail.com");
        Creator creator4 = findCreatorByEmail("mainaccount@lollapaloza.com");

        Location location1 = new Location("Rua das Dalias", "Belo Horizonte", "56789", "MG", "Brazil");
        Location location2 = new Location("6126 S Ellis", "Chicago", "60637", "IL", "USA");

        em.persist(location1);
        em.persist(location2);

        createEventForCreator(creator1, location1, "Beach Bash", "A wild beach party with non-stop music and fun.", 100.0, 20.0);
        createEventForCreator(creator1, location1, "Sunset Rave", "Dance the night away as the sun sets over the horizon.", 150.0, 30.0);
        
        createEventForCreator(creator2, location2, "Symphony Under the Stars", "A magical night of classical music under the open sky.", 200.0, 40.0);
        createEventForCreator(creator2, location2, "Mozart Gala", "A grand celebration of Mozart's greatest works.", 250.0, 50.0);

        createEventForCreator(creator3, location1, "Rock 'n Roll Extravaganza", "A high-energy rock festival with top bands.", 120.0, 25.0);
        createEventForCreator(creator3, location1, "Jazz in the Park", "A soothing evening of jazz music in the park.", 180.0, 0.0);

        createEventForCreator(creator4, location1, "Lollapaloza Kickoff", "The biggest music festival of the year starts here.", 10.0, 0.0);
        createEventForCreator(creator4, location1, "Electro Carnival", "A vibrant electronic music festival with stunning visuals.", 20.0, 0.0);

        em.getTransaction().commit();

        em.close();
        emf.close();
    }

    private Creator findCreatorByEmail(String email) {
        TypedQuery<Creator> query = em.createQuery("SELECT c FROM Creator c WHERE c.email = :email", Creator.class);
        query.setParameter("email", email);
        return query.getSingleResult();
    }

    private void createEventForCreator(Creator creator, Location location, String eventName, String eventDescription, double vipPrice, double generalPrice) {
        Event event = new Event(
            eventName,
            location,
            CreateDate.createDate(2023, 6, 10, 12, 0, 0),
            CreateDate.createDate(2023, 6, 10, 18, 0, 0),
            eventDescription,
            "Don't miss " + eventName + "!"
        );
        event.setCreator(creator);

        TicketType vipTicket = new TicketType("VIP", "Exclusive access", 50, 18, vipPrice, event);
        TicketType generalTicket = new TicketType("General Admission", "General access", 200, 18, generalPrice, event);

        em.persist(event);
        em.persist(vipTicket);
        em.persist(generalTicket);

        writeFile(event);
    }

    private void writeFile(Event event) {
        try {
            File outboxDir = new File("data/outbox");
            if (!outboxDir.exists()) {
                outboxDir.mkdirs();
            }

            String formattedEventId = String.format("%010d", event.getId());
            File eventFile = new File(outboxDir, "event-" + formattedEventId + "-creation.json");

            Map<String, Object> jsonContent = new HashMap<>();
            jsonContent.put("eventId", event.getId());
            jsonContent.put("creatorId", event.getCreator().getId());
            jsonContent.put("message", "event-creation");

            try (FileWriter writer = new FileWriter(eventFile)) {
                objectMapper.writeValue(writer, jsonContent);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        EventMarketInput eventCreation = new EventMarketInput();
        eventCreation.createEvents();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_abstract_camel.txt

Camel connection

================================================================================

FILE NAME: event-market-abstract/src/main/java/camelinaction/AbstractCamel.java

package camelinaction;

import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;

import javax.jms.ConnectionFactory;

public class AbstractCamel {

    public static void main(String[] args) throws Exception {
        CamelContext context = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        context.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

        context.addRoutes(new RouteBuilder() {
            public void configure() {
                // TODO: configure Camel routes here
            }
        });

        context.start();
        Thread.sleep(30000);

        context.stop();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_creator_creation_camel.txt

Camel connection

================================================================================

FILE NAME: event-market-creator-creation/src/main/java/camelinaction/CreatorCreationProducer.java

package camelinaction;

import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;

import javax.jms.ConnectionFactory;

public class CreatorCreationProducer {
    private static String noopOption = "";

    public static void main(String[] args) throws Exception {
        CamelContext context = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        context.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

        context.addRoutes(new RouteBuilder() {
            public void configure() {
                from("file:data/outbox" + noopOption)
                    .log("Sending message ${file:name}")
                    .to("jms:queue:notification.producer.creator.creation.queue");
            }
        });

        context.start();
        Thread.sleep(30000);

        context.stop();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_event_creation_camel.txt

Camel connection

================================================================================

FILE NAME: event-market-event-creation/src/main/java/camelinaction/EventCreationProducer.java

package camelinaction;

import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;

import javax.jms.ConnectionFactory;

public class EventCreationProducer {
    private static String noopOption = "";

    public static void main(String[] args) throws Exception {
        CamelContext context = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        context.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

        context.addRoutes(new RouteBuilder() {
            public void configure() {
                from("file:data/outbox" + noopOption)
                    .log("Sending message ${file:name}")
                    .to("jms:queue:notification.producer.event.creation.queue");
            }
        });

        context.start();
        Thread.sleep(30000);

        context.stop();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_financial_validation_input_file.txt

Input file

================================================================================

FILE NAME: event-market-financial-validation/src/main/java/eventmarketinput/EventMarketInput.java

package eventmarketinput;

import eventmarket.main.User;
import eventmarket.main.CreateDate;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class EventMarketInput {
    private EntityManagerFactory emf;
    private EntityManager em;
    private ObjectMapper objectMapper;

    public EventMarketInput() {
        emf = Persistence.createEntityManagerFactory("EventMarketPU");
        em = emf.createEntityManager();
        objectMapper = new ObjectMapper();
    }
    public static void main(String[] args) {
        // EventMarketInput userCreation = new EventMarketInput();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_ticket_purchase_camel.txt

Camel connection

================================================================================

FILE NAME: event-market-ticket-purchase/src/main/java/camelinaction/TicketPriceProcessor.java

package camelinaction;

import org.apache.camel.Exchange;
import org.apache.camel.Processor;

import java.util.Map;

public class TicketPriceProcessor implements Processor {
    @Override
    public void process(Exchange exchange) throws Exception {
        @SuppressWarnings("unchecked")
        Map<String, Object> body = exchange.getIn().getBody(Map.class);

        Double ticketPrice = (Double) body.get("ticketPrice");

        if (ticketPrice == null) {
            body.put("validPrice", false);
            body.put("positivePrice", false);
        } else if (ticketPrice <= 0) {
            body.put("validPrice", true);
            body.put("positivePrice", false);
        } else {
            body.put("validPrice", true);
            body.put("positivePrice", true);
        }
        exchange.getIn().setBody(body);
    }
}


================================================================================

FILE NAME: event-market-ticket-purchase/src/main/java/camelinaction/TicketPurchaseProducer.java

package camelinaction;

import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.model.dataformat.JsonLibrary;

import javax.jms.ConnectionFactory;
import java.util.Map;

public class TicketPurchaseProducer {
    private static String noopOption = "";

    public static void main(String[] args) throws Exception {
        CamelContext context = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        context.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

        context.addRoutes(new RouteBuilder() {
            public void configure() {
                from("file:data/outbox" + noopOption)
                    .log("Processing file: ${file:name}")
                    .unmarshal().json(JsonLibrary.Jackson, Map.class)
                    .process(new TicketPriceProcessor())
                    .choice()
                        .when(simple("${body[validPrice]} == false"))
                            .log("Sending to ticketvalidation.invalidmessage.queue")
                            .to("jms:queue:ticketvalidation.invalidmessage.queue")
                        .otherwise()
                            .multicast().stopOnException()
                                .parallelProcessing()
                                .to("direct:processTicket", "direct:inProcessNotification", "direct:inProcessRecommender")
                            .end()
                    .end()
                    .log("Sent message for file: ${file:name}");

                from("direct:processTicket")
                    .choice()
                        .when(simple("${body[positivePrice]} == true"))
                            .log("Sending to ticketvalidation.financial.queue")
                            .marshal().json(JsonLibrary.Jackson)  // Convert Map to JSON
                            .to("jms:queue:ticketvalidation.financial.queue")
                        .otherwise()
                            .log("Sending to ticketvalidation.completion.queue")
                            // .marshal().json(JsonLibrary.Jackson)  // Convert Map to JSON
                            .to("jms:queue:ticketvalidation.completion.queue");

                from("direct:inProcessNotification")
                    .process(exchange -> {
                        @SuppressWarnings("unchecked")
                        Map<String, Object> body = exchange.getIn().getBody(Map.class);
                        // body.remove("ticketPrice");
                        // body.remove("validPrice");
                        // body.remove("positivePrice");
                        body.put("message", "ticket-payment-in-process");
                        exchange.getIn().setBody(body);
                    })
                    .log("Sending to notification.producer.ticketpayment.inprocess.queue")
                    .marshal().json(JsonLibrary.Jackson)  // Convert Map to JSON
                    .to("jms:queue:notification.producer.ticketpayment.inprocess.queue");

                from("direct:inProcessRecommender")
                    .process(exchange -> {
                        @SuppressWarnings("unchecked")
                        Map<String, Object> body = exchange.getIn().getBody(Map.class);
                        // body.remove("ticketPrice");
                        // body.remove("validPrice");
                        // body.remove("positivePrice");
                        // body.remove("ticketRequestId");
                        exchange.getIn().setBody(body);
                    })
                    .log("Sending to recommender.builder.queue")
                    .marshal().json(JsonLibrary.Jackson)  // Convert Map to JSON
                    .to("jms:queue:recommender.builder.queue");
            }
        });

        context.start();
        Thread.sleep(30000);

        context.stop();
    }
}


================================================================================



================================================================================

FILE NAME: project-outline/applications-outline/event_market_notification_engine_input_file.txt

Input file

================================================================================

FILE NAME: event-market-notification-engine/src/main/java/eventmarketinput/EventMarketInput.java

package eventmarketinput;

import eventmarket.main.User;
import eventmarket.main.CreateDate;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class EventMarketInput {
    private EntityManagerFactory emf;
    private EntityManager em;
    private ObjectMapper objectMapper;

    public EventMarketInput() {
        emf = Persistence.createEntityManagerFactory("EventMarketPU");
        em = emf.createEntityManager();
        objectMapper = new ObjectMapper();
    }
    public static void main(String[] args) {
        // EventMarketInput userCreation = new EventMarketInput();
    }
}


================================================================================



================================================================================

