Camel connection

================================================================================

FILE NAME: event-market-ticket-purchase/src/main/java/camelinaction/TicketPriceProcessor.java

package camelinaction;

import org.apache.camel.Exchange;
import org.apache.camel.Processor;

import java.util.Map;

public class TicketPriceProcessor implements Processor {
    @Override
    public void process(Exchange exchange) throws Exception {
        @SuppressWarnings("unchecked")
        Map<String, Object> body = exchange.getIn().getBody(Map.class);

        Double ticketPrice = (Double) body.get("ticketPrice");

        if (ticketPrice == null) {
            body.put("validPrice", false);
            body.put("positivePrice", false);
        } else if (ticketPrice <= 0) {
            body.put("validPrice", true);
            body.put("positivePrice", false);
        } else {
            body.put("validPrice", true);
            body.put("positivePrice", true);
        }
        exchange.getIn().setBody(body);
    }
}


================================================================================

FILE NAME: event-market-ticket-purchase/src/main/java/camelinaction/TicketPurchaseProducer.java

package camelinaction;

import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.model.dataformat.JsonLibrary;

import javax.jms.ConnectionFactory;
import java.util.Map;

public class TicketPurchaseProducer {
    private static String noopOption = "";

    public static void main(String[] args) throws Exception {
        CamelContext context = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        context.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

        context.addRoutes(new RouteBuilder() {
            public void configure() {
                from("file:data/outbox" + noopOption)
                    .log("Processing file: ${file:name}")
                    .unmarshal().json(JsonLibrary.Jackson, Map.class)
                    .process(new TicketPriceProcessor())
                    .choice()
                        .when(simple("${body[validPrice]} == false"))
                            .log("Sending to ticketvalidation.invalidmessage.queue")
                            .to("jms:queue:ticketvalidation.invalidmessage.queue")
                        .otherwise()
                            .multicast().stopOnException()
                                .parallelProcessing()
                                .to("direct:processTicket", "direct:inProcessNotification", "direct:inProcessRecommender")
                            .end()
                    .end()
                    .log("Sent message for file: ${file:name}");

                from("direct:processTicket")
                    .choice()
                        .when(simple("${body[positivePrice]} == true"))
                            .log("Sending to ticketvalidation.financial.queue")
                            .marshal().json(JsonLibrary.Jackson)  // Convert Map to JSON
                            .to("jms:queue:ticketvalidation.financial.queue")
                        .otherwise()
                            .log("Sending to ticketvalidation.completion.queue")
                            // .marshal().json(JsonLibrary.Jackson)  // Convert Map to JSON
                            .to("jms:queue:ticketvalidation.completion.queue");

                from("direct:inProcessNotification")
                    .process(exchange -> {
                        @SuppressWarnings("unchecked")
                        Map<String, Object> body = exchange.getIn().getBody(Map.class);
                        // body.remove("ticketPrice");
                        // body.remove("validPrice");
                        // body.remove("positivePrice");
                        body.put("message", "ticket-payment-in-process");
                        exchange.getIn().setBody(body);
                    })
                    .log("Sending to notification.producer.ticketpayment.inprocess.queue")
                    .marshal().json(JsonLibrary.Jackson)  // Convert Map to JSON
                    .to("jms:queue:notification.producer.ticketpayment.inprocess.queue");

                from("direct:inProcessRecommender")
                    .process(exchange -> {
                        @SuppressWarnings("unchecked")
                        Map<String, Object> body = exchange.getIn().getBody(Map.class);
                        // body.remove("ticketPrice");
                        // body.remove("validPrice");
                        // body.remove("positivePrice");
                        // body.remove("ticketRequestId");
                        exchange.getIn().setBody(body);
                    })
                    .log("Sending to recommender.builder.queue")
                    .marshal().json(JsonLibrary.Jackson)  // Convert Map to JSON
                    .to("jms:queue:recommender.builder.queue");
            }
        });

        context.start();
        Thread.sleep(30000);

        context.stop();
    }
}


================================================================================

