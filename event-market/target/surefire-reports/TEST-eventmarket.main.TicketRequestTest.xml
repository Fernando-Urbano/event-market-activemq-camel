<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="eventmarket.main.TicketRequestTest" time="0.463" tests="3" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/fernandorochacorreaurbano/Desktop/OO Architecture/finalproject-fernandourbano-uchicago/event-market/target/test-classes:/Users/fernandorochacorreaurbano/Desktop/OO Architecture/finalproject-fernandourbano-uchicago/event-market/target/classes:/Users/fernandorochacorreaurbano/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.8.2/junit-jupiter-api-5.8.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/junit/platform/junit-platform-commons/1.8.2/junit-platform-commons-1.8.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/javax/persistence/javax.persistence-api/2.2/javax.persistence-api-2.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/hibernate/hibernate-core/5.6.9.Final/hibernate-core-5.6.9.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/jboss/logging/jboss-logging/3.4.3.Final/jboss-logging-3.4.3.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/net/bytebuddy/byte-buddy/1.12.9/byte-buddy-1.12.9.jar:/Users/fernandorochacorreaurbano/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/jboss/spec/javax/transaction/jboss-transaction-api_1.2_spec/1.1.1.Final/jboss-transaction-api_1.2_spec-1.1.1.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/jboss/jandex/2.4.2.Final/jandex-2.4.2.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/Users/fernandorochacorreaurbano/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/hibernate/common/hibernate-commons-annotations/5.1.2.Final/hibernate-commons-annotations-5.1.2.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.1/jaxb-runtime-2.3.1.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/glassfish/jaxb/txw2/2.3.1/txw2-2.3.1.jar:/Users/fernandorochacorreaurbano/.m2/repository/com/sun/istack/istack-commons-runtime/3.0.7/istack-commons-runtime-3.0.7.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/jvnet/staxex/stax-ex/1.8/stax-ex-1.8.jar:/Users/fernandorochacorreaurbano/.m2/repository/com/sun/xml/fastinfoset/FastInfoset/1.2.15/FastInfoset-1.2.15.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/postgresql/postgresql/42.4.0/postgresql-42.4.0.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/hibernate/hibernate-entitymanager/5.4.32.Final/hibernate-entitymanager-5.4.32.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/Chicago"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/amazon-corretto-21.jdk/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/fernandorochacorreaurbano/Desktop/OO Architecture/finalproject-fernandourbano-uchicago/event-market/target/surefire/surefirebooter-20240520180556488_3.jar /Users/fernandorochacorreaurbano/Desktop/OO Architecture/finalproject-fernandourbano-uchicago/event-market/target/surefire 2024-05-20T18-05-55_780-jvmRun1 surefire-20240520180556488_1tmp surefire_0-20240520180556488_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/fernandorochacorreaurbano/Desktop/OO Architecture/finalproject-fernandourbano-uchicago/event-market/target/test-classes:/Users/fernandorochacorreaurbano/Desktop/OO Architecture/finalproject-fernandourbano-uchicago/event-market/target/classes:/Users/fernandorochacorreaurbano/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.8.2/junit-jupiter-api-5.8.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/junit/platform/junit-platform-commons/1.8.2/junit-platform-commons-1.8.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/javax/persistence/javax.persistence-api/2.2/javax.persistence-api-2.2.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/hibernate/hibernate-core/5.6.9.Final/hibernate-core-5.6.9.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/jboss/logging/jboss-logging/3.4.3.Final/jboss-logging-3.4.3.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/net/bytebuddy/byte-buddy/1.12.9/byte-buddy-1.12.9.jar:/Users/fernandorochacorreaurbano/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/jboss/spec/javax/transaction/jboss-transaction-api_1.2_spec/1.1.1.Final/jboss-transaction-api_1.2_spec-1.1.1.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/jboss/jandex/2.4.2.Final/jandex-2.4.2.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/Users/fernandorochacorreaurbano/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/hibernate/common/hibernate-commons-annotations/5.1.2.Final/hibernate-commons-annotations-5.1.2.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.1/jaxb-runtime-2.3.1.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/glassfish/jaxb/txw2/2.3.1/txw2-2.3.1.jar:/Users/fernandorochacorreaurbano/.m2/repository/com/sun/istack/istack-commons-runtime/3.0.7/istack-commons-runtime-3.0.7.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/jvnet/staxex/stax-ex/1.8/stax-ex-1.8.jar:/Users/fernandorochacorreaurbano/.m2/repository/com/sun/xml/fastinfoset/FastInfoset/1.2.15/FastInfoset-1.2.15.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/postgresql/postgresql/42.4.0/postgresql-42.4.0.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/hibernate/hibernate-entitymanager/5.4.32.Final/hibernate-entitymanager-5.4.32.Final.jar:/Users/fernandorochacorreaurbano/.m2/repository/org/dom4j/dom4j/2.1.3/dom4j-2.1.3.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/fernandorochacorreaurbano"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-01-16"/>
    <property name="java.home" value="/Library/Java/JavaVirtualMachines/amazon-corretto-21.jdk/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/fernandorochacorreaurbano/Desktop/OO Architecture/finalproject-fernandourbano-uchicago/event-market"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/fernandorochacorreaurbano/Desktop/OO Architecture/finalproject-fernandourbano-uchicago/event-market/target/surefire/surefirebooter-20240520180556488_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="21.0.2+13-LTS"/>
    <property name="user.name" value="fernandorochacorreaurbano"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="14.4.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-21.0.2.13.1"/>
    <property name="localRepository" value="/Users/fernandorochacorreaurbano/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-21/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/km/t5mryd8x5ln51m7h8bw1h3cc0000gn/T/"/>
    <property name="java.version" value="21.0.2"/>
    <property name="user.dir" value="/Users/fernandorochacorreaurbano/Desktop/OO Architecture/finalproject-fernandourbano-uchicago/event-market"/>
    <property name="os.arch" value="x86_64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/fernandorochacorreaurbano/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="21.0.2+13-LTS"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="65.0"/>
  </properties>
  <testcase name="testTicketRequestDeletion" classname="eventmarket.main.TicketRequestTest" time="0.15">
    <system-out><![CDATA[Hibernate: 
    
    alter table card_payments 
       drop constraint FKic7mb0ymisnucpq72pu7dcvcv
Hibernate: 
    
    alter table checking_account_payments 
       drop constraint FK6gj23lu9s32y52yy7xd4tgaf6
Hibernate: 
    
    alter table events 
       drop constraint FKjps29529ev7c8eivb26m69f2u
Hibernate: 
    
    alter table events 
       drop constraint FK7a9tiyl3gaugxrtjc2m97awui
Hibernate: 
    
    alter table financial_information 
       drop constraint FK7p5g57g99opt9414b98lw9630
Hibernate: 
    
    alter table financial_information 
       drop constraint FKo7ei496g72xfjbiyh5db863xi
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FKoc13f9ha83d51mle3juj95n6u
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FK8p9gn9u4arhs1m0h8d1d38bfp
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FK6fjy9aonbpsxsk5cso9oovtqf
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FKohueelmdfs1uf7y0fgv4uscy
Hibernate: 
    
    alter table ticket_types 
       drop constraint FKl83j9knh8jrssp3skaeubrrk
Hibernate: 
    
    alter table tickets 
       drop constraint FK7gr4g6bxns8i848sxyy5ly47g
Hibernate: 
    
    alter table tickets 
       drop constraint FK4eqsebpimnjen0q46ja6fl2hl
Hibernate: 
    
    drop table if exists card_payments cascade
Hibernate: 
    
    drop table if exists checking_account_payments cascade
Hibernate: 
    
    drop table if exists creators cascade
Hibernate: 
    
    drop table if exists events cascade
Hibernate: 
    
    drop table if exists financial_information cascade
Hibernate: 
    
    drop table if exists locations cascade
Hibernate: 
    
    drop table if exists payment_methods cascade
Hibernate: 
    
    drop table if exists recipients cascade
Hibernate: 
    
    drop table if exists ticket_requests cascade
Hibernate: 
    
    drop table if exists ticket_types cascade
Hibernate: 
    
    drop table if exists tickets cascade
Hibernate: 
    
    drop table if exists users cascade
Hibernate: 
    
    create table card_payments (
       cardHolder varchar(255) not null,
        cardNumber varchar(255) not null,
        cvv varchar(255) not null,
        expirationDate date not null,
        id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table checking_account_payments (
       accountNumber varchar(255) not null,
        routingNumber varchar(255) not null,
        id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table creators (
       id  serial not null,
        created_at timestamp not null,
        email varchar(255) not null,
        name varchar(255) not null,
        password varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table events (
       id  serial not null,
        checkedInCount int4 not null,
        created_at timestamp not null,
        endTime timestamp not null,
        name varchar(255) not null,
        publicDescription varchar(255) not null,
        publicTagline varchar(255) not null,
        purchaseCount int4 not null,
        startTime timestamp not null,
        creator_id int4 not null,
        location_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table financial_information (
       id  serial not null,
        payment_method_id int4,
        user_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table locations (
       id  serial not null,
        address varchar(255) not null,
        city varchar(255) not null,
        country varchar(255) not null,
        created_at timestamp not null,
        state varchar(255) not null,
        zipcode varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table payment_methods (
       id  serial not null,
        primary key (id)
    )
Hibernate: 
    
    create table recipients (
       id  serial not null,
        birthDate date not null,
        created_at timestamp not null,
        email varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table ticket_requests (
       id  serial not null,
        approved boolean not null,
        created_at timestamp not null,
        financial_information_id int4,
        recipient_id int4 not null,
        ticket_type_id int4 not null,
        user_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table ticket_types (
       id  serial not null,
        created_at timestamp not null,
        description varchar(255) not null,
        maxNumberOfPeople int4 not null,
        minimumAgeToAttend int4 not null,
        name varchar(255) not null,
        price float8 not null,
        event_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table tickets (
       id  serial not null,
        checkedIn boolean not null,
        created_at timestamp not null,
        ticket_request_id int4 not null,
        user_id int4,
        primary key (id)
    )
Hibernate: 
    
    create table users (
       id  serial not null,
        birthDate date,
        created_at timestamp not null,
        email varchar(255) not null,
        name varchar(255) not null,
        password varchar(255) not null,
        receives_emails boolean not null,
        receives_pushs boolean not null,
        primary key (id)
    )
Hibernate: 
    
    alter table creators 
       add constraint UK_ctcc11eiqhscs3nex9hpniri3 unique (email)
Hibernate: 
    
    alter table recipients 
       add constraint UK_6gpos5vs0ldsagne4t1vw2222 unique (email)
Hibernate: 
    
    alter table users 
       add constraint UK_6dotkott2kjsp8vw4d0m25fb7 unique (email)
Hibernate: 
    
    alter table card_payments 
       add constraint FKic7mb0ymisnucpq72pu7dcvcv 
       foreign key (id) 
       references payment_methods
Hibernate: 
    
    alter table checking_account_payments 
       add constraint FK6gj23lu9s32y52yy7xd4tgaf6 
       foreign key (id) 
       references payment_methods
Hibernate: 
    
    alter table events 
       add constraint FKjps29529ev7c8eivb26m69f2u 
       foreign key (creator_id) 
       references creators
Hibernate: 
    
    alter table events 
       add constraint FK7a9tiyl3gaugxrtjc2m97awui 
       foreign key (location_id) 
       references locations
Hibernate: 
    
    alter table financial_information 
       add constraint FK7p5g57g99opt9414b98lw9630 
       foreign key (payment_method_id) 
       references payment_methods
Hibernate: 
    
    alter table financial_information 
       add constraint FKo7ei496g72xfjbiyh5db863xi 
       foreign key (user_id) 
       references users
Hibernate: 
    
    alter table ticket_requests 
       add constraint FKoc13f9ha83d51mle3juj95n6u 
       foreign key (financial_information_id) 
       references financial_information
Hibernate: 
    
    alter table ticket_requests 
       add constraint FK8p9gn9u4arhs1m0h8d1d38bfp 
       foreign key (recipient_id) 
       references recipients
Hibernate: 
    
    alter table ticket_requests 
       add constraint FK6fjy9aonbpsxsk5cso9oovtqf 
       foreign key (ticket_type_id) 
       references ticket_types
Hibernate: 
    
    alter table ticket_requests 
       add constraint FKohueelmdfs1uf7y0fgv4uscy 
       foreign key (user_id) 
       references users
Hibernate: 
    
    alter table ticket_types 
       add constraint FKl83j9knh8jrssp3skaeubrrk 
       foreign key (event_id) 
       references events
Hibernate: 
    
    alter table tickets 
       add constraint FK7gr4g6bxns8i848sxyy5ly47g 
       foreign key (ticket_request_id) 
       references ticket_requests
Hibernate: 
    
    alter table tickets 
       add constraint FK4eqsebpimnjen0q46ja6fl2hl 
       foreign key (user_id) 
       references users
Hibernate: 
    insert 
    into
        locations
        (address, city, country, created_at, state, zipcode) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        creators
        (created_at, email, name, password) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        events
        (checkedInCount, created_at, creator_id, endTime, location_id, name, publicDescription, publicTagline, purchaseCount, startTime) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ticket_types
        (created_at, description, event_id, maxNumberOfPeople, minimumAgeToAttend, name, price) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (birthDate, created_at, email, name, password, receives_emails, receives_pushs) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        recipients
        (birthDate, created_at, email, name) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        payment_methods
        default 
    values
        
Hibernate: 
    insert 
    into
        card_payments
        (cardHolder, cardNumber, cvv, expirationDate, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        financial_information
        (payment_method_id, user_id) 
    values
        (?, ?)
Hibernate: 
    update
        financial_information 
    set
        payment_method_id=?,
        user_id=? 
    where
        id=?
Hibernate: 
    delete 
    from
        financial_information 
    where
        id=?
Hibernate: 
    delete 
    from
        card_payments 
    where
        id=?
Hibernate: 
    delete 
    from
        payment_methods 
    where
        id=?
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    delete 
    from
        recipients 
    where
        id=?
Hibernate: 
    delete 
    from
        ticket_types 
    where
        id=?
Hibernate: 
    delete 
    from
        events 
    where
        id=?
Hibernate: 
    delete 
    from
        locations 
    where
        id=?
Hibernate: 
    delete 
    from
        creators 
    where
        id=?
Hibernate: 
    select
        location0_.id as id1_5_0_,
        location0_.address as address2_5_0_,
        location0_.city as city3_5_0_,
        location0_.country as country4_5_0_,
        location0_.created_at as created_5_5_0_,
        location0_.state as state6_5_0_,
        location0_.zipcode as zipcode7_5_0_ 
    from
        locations location0_ 
    where
        location0_.id=?
]]></system-out>
    <system-err><![CDATA[May 20, 2024 6:06:11 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: EventMarketPU-Test]
May 20, 2024 6:06:11 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
May 20, 2024 6:06:11 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.postgresql.Driver] at URL [jdbc:postgresql://localhost:5432/eventmarket_test_db]
May 20, 2024 6:06:11 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=fernandorochacorreaurbano}
May 20, 2024 6:06:11 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
May 20, 2024 6:06:11 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
May 20, 2024 6:06:11 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
May 20, 2024 6:06:11 PM org.hibernate.cfg.AnnotationBinder bindClass
WARN: HHH000499: Using @AttributeOverride or @AttributeOverrides in conjunction with entity inheritance is not supported: eventmarket.main.CheckingAccountPayment. The overriding definitions are ignored.
May 20, 2024 6:06:11 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@76efa553] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
May 20, 2024 6:06:11 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@75af77d4] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
May 20, 2024 6:06:12 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:postgresql://localhost:5432/eventmarket_test_db]
]]></system-err>
  </testcase>
  <testcase name="testTicketRequestUpdate" classname="eventmarket.main.TicketRequestTest" time="0.155">
    <system-out><![CDATA[Hibernate: 
    
    alter table card_payments 
       drop constraint FKic7mb0ymisnucpq72pu7dcvcv
Hibernate: 
    
    alter table checking_account_payments 
       drop constraint FK6gj23lu9s32y52yy7xd4tgaf6
Hibernate: 
    
    alter table events 
       drop constraint FKjps29529ev7c8eivb26m69f2u
Hibernate: 
    
    alter table events 
       drop constraint FK7a9tiyl3gaugxrtjc2m97awui
Hibernate: 
    
    alter table financial_information 
       drop constraint FK7p5g57g99opt9414b98lw9630
Hibernate: 
    
    alter table financial_information 
       drop constraint FKo7ei496g72xfjbiyh5db863xi
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FKoc13f9ha83d51mle3juj95n6u
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FK8p9gn9u4arhs1m0h8d1d38bfp
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FK6fjy9aonbpsxsk5cso9oovtqf
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FKohueelmdfs1uf7y0fgv4uscy
Hibernate: 
    
    alter table ticket_types 
       drop constraint FKl83j9knh8jrssp3skaeubrrk
Hibernate: 
    
    alter table tickets 
       drop constraint FK7gr4g6bxns8i848sxyy5ly47g
Hibernate: 
    
    alter table tickets 
       drop constraint FK4eqsebpimnjen0q46ja6fl2hl
Hibernate: 
    
    drop table if exists card_payments cascade
Hibernate: 
    
    drop table if exists checking_account_payments cascade
Hibernate: 
    
    drop table if exists creators cascade
Hibernate: 
    
    drop table if exists events cascade
Hibernate: 
    
    drop table if exists financial_information cascade
Hibernate: 
    
    drop table if exists locations cascade
Hibernate: 
    
    drop table if exists payment_methods cascade
Hibernate: 
    
    drop table if exists recipients cascade
Hibernate: 
    
    drop table if exists ticket_requests cascade
Hibernate: 
    
    drop table if exists ticket_types cascade
Hibernate: 
    
    drop table if exists tickets cascade
Hibernate: 
    
    drop table if exists users cascade
Hibernate: 
    
    create table card_payments (
       cardHolder varchar(255) not null,
        cardNumber varchar(255) not null,
        cvv varchar(255) not null,
        expirationDate date not null,
        id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table checking_account_payments (
       accountNumber varchar(255) not null,
        routingNumber varchar(255) not null,
        id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table creators (
       id  serial not null,
        created_at timestamp not null,
        email varchar(255) not null,
        name varchar(255) not null,
        password varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table events (
       id  serial not null,
        checkedInCount int4 not null,
        created_at timestamp not null,
        endTime timestamp not null,
        name varchar(255) not null,
        publicDescription varchar(255) not null,
        publicTagline varchar(255) not null,
        purchaseCount int4 not null,
        startTime timestamp not null,
        creator_id int4 not null,
        location_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table financial_information (
       id  serial not null,
        payment_method_id int4,
        user_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table locations (
       id  serial not null,
        address varchar(255) not null,
        city varchar(255) not null,
        country varchar(255) not null,
        created_at timestamp not null,
        state varchar(255) not null,
        zipcode varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table payment_methods (
       id  serial not null,
        primary key (id)
    )
Hibernate: 
    
    create table recipients (
       id  serial not null,
        birthDate date not null,
        created_at timestamp not null,
        email varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table ticket_requests (
       id  serial not null,
        approved boolean not null,
        created_at timestamp not null,
        financial_information_id int4,
        recipient_id int4 not null,
        ticket_type_id int4 not null,
        user_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table ticket_types (
       id  serial not null,
        created_at timestamp not null,
        description varchar(255) not null,
        maxNumberOfPeople int4 not null,
        minimumAgeToAttend int4 not null,
        name varchar(255) not null,
        price float8 not null,
        event_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table tickets (
       id  serial not null,
        checkedIn boolean not null,
        created_at timestamp not null,
        ticket_request_id int4 not null,
        user_id int4,
        primary key (id)
    )
Hibernate: 
    
    create table users (
       id  serial not null,
        birthDate date,
        created_at timestamp not null,
        email varchar(255) not null,
        name varchar(255) not null,
        password varchar(255) not null,
        receives_emails boolean not null,
        receives_pushs boolean not null,
        primary key (id)
    )
Hibernate: 
    
    alter table creators 
       add constraint UK_ctcc11eiqhscs3nex9hpniri3 unique (email)
Hibernate: 
    
    alter table recipients 
       add constraint UK_6gpos5vs0ldsagne4t1vw2222 unique (email)
Hibernate: 
    
    alter table users 
       add constraint UK_6dotkott2kjsp8vw4d0m25fb7 unique (email)
Hibernate: 
    
    alter table card_payments 
       add constraint FKic7mb0ymisnucpq72pu7dcvcv 
       foreign key (id) 
       references payment_methods
Hibernate: 
    
    alter table checking_account_payments 
       add constraint FK6gj23lu9s32y52yy7xd4tgaf6 
       foreign key (id) 
       references payment_methods
Hibernate: 
    
    alter table events 
       add constraint FKjps29529ev7c8eivb26m69f2u 
       foreign key (creator_id) 
       references creators
Hibernate: 
    
    alter table events 
       add constraint FK7a9tiyl3gaugxrtjc2m97awui 
       foreign key (location_id) 
       references locations
Hibernate: 
    
    alter table financial_information 
       add constraint FK7p5g57g99opt9414b98lw9630 
       foreign key (payment_method_id) 
       references payment_methods
Hibernate: 
    
    alter table financial_information 
       add constraint FKo7ei496g72xfjbiyh5db863xi 
       foreign key (user_id) 
       references users
Hibernate: 
    
    alter table ticket_requests 
       add constraint FKoc13f9ha83d51mle3juj95n6u 
       foreign key (financial_information_id) 
       references financial_information
Hibernate: 
    
    alter table ticket_requests 
       add constraint FK8p9gn9u4arhs1m0h8d1d38bfp 
       foreign key (recipient_id) 
       references recipients
Hibernate: 
    
    alter table ticket_requests 
       add constraint FK6fjy9aonbpsxsk5cso9oovtqf 
       foreign key (ticket_type_id) 
       references ticket_types
Hibernate: 
    
    alter table ticket_requests 
       add constraint FKohueelmdfs1uf7y0fgv4uscy 
       foreign key (user_id) 
       references users
Hibernate: 
    
    alter table ticket_types 
       add constraint FKl83j9knh8jrssp3skaeubrrk 
       foreign key (event_id) 
       references events
Hibernate: 
    
    alter table tickets 
       add constraint FK7gr4g6bxns8i848sxyy5ly47g 
       foreign key (ticket_request_id) 
       references ticket_requests
Hibernate: 
    
    alter table tickets 
       add constraint FK4eqsebpimnjen0q46ja6fl2hl 
       foreign key (user_id) 
       references users
Hibernate: 
    insert 
    into
        locations
        (address, city, country, created_at, state, zipcode) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        creators
        (created_at, email, name, password) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        events
        (checkedInCount, created_at, creator_id, endTime, location_id, name, publicDescription, publicTagline, purchaseCount, startTime) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ticket_types
        (created_at, description, event_id, maxNumberOfPeople, minimumAgeToAttend, name, price) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (birthDate, created_at, email, name, password, receives_emails, receives_pushs) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        recipients
        (birthDate, created_at, email, name) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        payment_methods
        default 
    values
        
Hibernate: 
    insert 
    into
        card_payments
        (cardHolder, cardNumber, cvv, expirationDate, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        financial_information
        (payment_method_id, user_id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        ticket_requests
        (approved, created_at, financial_information_id, recipient_id, ticket_type_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    update
        ticket_requests 
    set
        approved=?,
        financial_information_id=?,
        recipient_id=?,
        ticket_type_id=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        financial_information 
    set
        payment_method_id=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        ticket_requests 
    set
        approved=?,
        financial_information_id=?,
        recipient_id=?,
        ticket_type_id=?,
        user_id=? 
    where
        id=?
Hibernate: 
    delete 
    from
        financial_information 
    where
        id=?
Hibernate: 
    delete 
    from
        card_payments 
    where
        id=?
Hibernate: 
    delete 
    from
        payment_methods 
    where
        id=?
Hibernate: 
    delete 
    from
        ticket_requests 
    where
        id=?
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    delete 
    from
        recipients 
    where
        id=?
Hibernate: 
    delete 
    from
        ticket_types 
    where
        id=?
Hibernate: 
    delete 
    from
        events 
    where
        id=?
Hibernate: 
    delete 
    from
        locations 
    where
        id=?
Hibernate: 
    delete 
    from
        creators 
    where
        id=?
Hibernate: 
    select
        location0_.id as id1_5_0_,
        location0_.address as address2_5_0_,
        location0_.city as city3_5_0_,
        location0_.country as country4_5_0_,
        location0_.created_at as created_5_5_0_,
        location0_.state as state6_5_0_,
        location0_.zipcode as zipcode7_5_0_ 
    from
        locations location0_ 
    where
        location0_.id=?
]]></system-out>
    <system-err><![CDATA[May 20, 2024 6:06:12 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: EventMarketPU-Test]
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.postgresql.Driver] at URL [jdbc:postgresql://localhost:5432/eventmarket_test_db]
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=fernandorochacorreaurbano}
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
May 20, 2024 6:06:12 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
May 20, 2024 6:06:12 PM org.hibernate.cfg.AnnotationBinder bindClass
WARN: HHH000499: Using @AttributeOverride or @AttributeOverrides in conjunction with entity inheritance is not supported: eventmarket.main.CheckingAccountPayment. The overriding definitions are ignored.
May 20, 2024 6:06:12 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@36dbbbaa] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
May 20, 2024 6:06:12 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@2b3eb355] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
May 20, 2024 6:06:12 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:postgresql://localhost:5432/eventmarket_test_db]
]]></system-err>
  </testcase>
  <testcase name="testTicketRequestCreation" classname="eventmarket.main.TicketRequestTest" time="0.154">
    <system-out><![CDATA[Hibernate: 
    
    alter table card_payments 
       drop constraint FKic7mb0ymisnucpq72pu7dcvcv
Hibernate: 
    
    alter table checking_account_payments 
       drop constraint FK6gj23lu9s32y52yy7xd4tgaf6
Hibernate: 
    
    alter table events 
       drop constraint FKjps29529ev7c8eivb26m69f2u
Hibernate: 
    
    alter table events 
       drop constraint FK7a9tiyl3gaugxrtjc2m97awui
Hibernate: 
    
    alter table financial_information 
       drop constraint FK7p5g57g99opt9414b98lw9630
Hibernate: 
    
    alter table financial_information 
       drop constraint FKo7ei496g72xfjbiyh5db863xi
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FKoc13f9ha83d51mle3juj95n6u
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FK8p9gn9u4arhs1m0h8d1d38bfp
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FK6fjy9aonbpsxsk5cso9oovtqf
Hibernate: 
    
    alter table ticket_requests 
       drop constraint FKohueelmdfs1uf7y0fgv4uscy
Hibernate: 
    
    alter table ticket_types 
       drop constraint FKl83j9knh8jrssp3skaeubrrk
Hibernate: 
    
    alter table tickets 
       drop constraint FK7gr4g6bxns8i848sxyy5ly47g
Hibernate: 
    
    alter table tickets 
       drop constraint FK4eqsebpimnjen0q46ja6fl2hl
Hibernate: 
    
    drop table if exists card_payments cascade
Hibernate: 
    
    drop table if exists checking_account_payments cascade
Hibernate: 
    
    drop table if exists creators cascade
Hibernate: 
    
    drop table if exists events cascade
Hibernate: 
    
    drop table if exists financial_information cascade
Hibernate: 
    
    drop table if exists locations cascade
Hibernate: 
    
    drop table if exists payment_methods cascade
Hibernate: 
    
    drop table if exists recipients cascade
Hibernate: 
    
    drop table if exists ticket_requests cascade
Hibernate: 
    
    drop table if exists ticket_types cascade
Hibernate: 
    
    drop table if exists tickets cascade
Hibernate: 
    
    drop table if exists users cascade
Hibernate: 
    
    create table card_payments (
       cardHolder varchar(255) not null,
        cardNumber varchar(255) not null,
        cvv varchar(255) not null,
        expirationDate date not null,
        id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table checking_account_payments (
       accountNumber varchar(255) not null,
        routingNumber varchar(255) not null,
        id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table creators (
       id  serial not null,
        created_at timestamp not null,
        email varchar(255) not null,
        name varchar(255) not null,
        password varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table events (
       id  serial not null,
        checkedInCount int4 not null,
        created_at timestamp not null,
        endTime timestamp not null,
        name varchar(255) not null,
        publicDescription varchar(255) not null,
        publicTagline varchar(255) not null,
        purchaseCount int4 not null,
        startTime timestamp not null,
        creator_id int4 not null,
        location_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table financial_information (
       id  serial not null,
        payment_method_id int4,
        user_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table locations (
       id  serial not null,
        address varchar(255) not null,
        city varchar(255) not null,
        country varchar(255) not null,
        created_at timestamp not null,
        state varchar(255) not null,
        zipcode varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table payment_methods (
       id  serial not null,
        primary key (id)
    )
Hibernate: 
    
    create table recipients (
       id  serial not null,
        birthDate date not null,
        created_at timestamp not null,
        email varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    
    create table ticket_requests (
       id  serial not null,
        approved boolean not null,
        created_at timestamp not null,
        financial_information_id int4,
        recipient_id int4 not null,
        ticket_type_id int4 not null,
        user_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table ticket_types (
       id  serial not null,
        created_at timestamp not null,
        description varchar(255) not null,
        maxNumberOfPeople int4 not null,
        minimumAgeToAttend int4 not null,
        name varchar(255) not null,
        price float8 not null,
        event_id int4 not null,
        primary key (id)
    )
Hibernate: 
    
    create table tickets (
       id  serial not null,
        checkedIn boolean not null,
        created_at timestamp not null,
        ticket_request_id int4 not null,
        user_id int4,
        primary key (id)
    )
Hibernate: 
    
    create table users (
       id  serial not null,
        birthDate date,
        created_at timestamp not null,
        email varchar(255) not null,
        name varchar(255) not null,
        password varchar(255) not null,
        receives_emails boolean not null,
        receives_pushs boolean not null,
        primary key (id)
    )
Hibernate: 
    
    alter table creators 
       add constraint UK_ctcc11eiqhscs3nex9hpniri3 unique (email)
Hibernate: 
    
    alter table recipients 
       add constraint UK_6gpos5vs0ldsagne4t1vw2222 unique (email)
Hibernate: 
    
    alter table users 
       add constraint UK_6dotkott2kjsp8vw4d0m25fb7 unique (email)
Hibernate: 
    
    alter table card_payments 
       add constraint FKic7mb0ymisnucpq72pu7dcvcv 
       foreign key (id) 
       references payment_methods
Hibernate: 
    
    alter table checking_account_payments 
       add constraint FK6gj23lu9s32y52yy7xd4tgaf6 
       foreign key (id) 
       references payment_methods
Hibernate: 
    
    alter table events 
       add constraint FKjps29529ev7c8eivb26m69f2u 
       foreign key (creator_id) 
       references creators
Hibernate: 
    
    alter table events 
       add constraint FK7a9tiyl3gaugxrtjc2m97awui 
       foreign key (location_id) 
       references locations
Hibernate: 
    
    alter table financial_information 
       add constraint FK7p5g57g99opt9414b98lw9630 
       foreign key (payment_method_id) 
       references payment_methods
Hibernate: 
    
    alter table financial_information 
       add constraint FKo7ei496g72xfjbiyh5db863xi 
       foreign key (user_id) 
       references users
Hibernate: 
    
    alter table ticket_requests 
       add constraint FKoc13f9ha83d51mle3juj95n6u 
       foreign key (financial_information_id) 
       references financial_information
Hibernate: 
    
    alter table ticket_requests 
       add constraint FK8p9gn9u4arhs1m0h8d1d38bfp 
       foreign key (recipient_id) 
       references recipients
Hibernate: 
    
    alter table ticket_requests 
       add constraint FK6fjy9aonbpsxsk5cso9oovtqf 
       foreign key (ticket_type_id) 
       references ticket_types
Hibernate: 
    
    alter table ticket_requests 
       add constraint FKohueelmdfs1uf7y0fgv4uscy 
       foreign key (user_id) 
       references users
Hibernate: 
    
    alter table ticket_types 
       add constraint FKl83j9knh8jrssp3skaeubrrk 
       foreign key (event_id) 
       references events
Hibernate: 
    
    alter table tickets 
       add constraint FK7gr4g6bxns8i848sxyy5ly47g 
       foreign key (ticket_request_id) 
       references ticket_requests
Hibernate: 
    
    alter table tickets 
       add constraint FK4eqsebpimnjen0q46ja6fl2hl 
       foreign key (user_id) 
       references users
Hibernate: 
    insert 
    into
        locations
        (address, city, country, created_at, state, zipcode) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        creators
        (created_at, email, name, password) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        events
        (checkedInCount, created_at, creator_id, endTime, location_id, name, publicDescription, publicTagline, purchaseCount, startTime) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ticket_types
        (created_at, description, event_id, maxNumberOfPeople, minimumAgeToAttend, name, price) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (birthDate, created_at, email, name, password, receives_emails, receives_pushs) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        recipients
        (birthDate, created_at, email, name) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        payment_methods
        default 
    values
        
Hibernate: 
    insert 
    into
        card_payments
        (cardHolder, cardNumber, cvv, expirationDate, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        financial_information
        (payment_method_id, user_id) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        ticket_requests
        (approved, created_at, financial_information_id, recipient_id, ticket_type_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    update
        financial_information 
    set
        payment_method_id=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        ticket_requests 
    set
        approved=?,
        financial_information_id=?,
        recipient_id=?,
        ticket_type_id=?,
        user_id=? 
    where
        id=?
Hibernate: 
    delete 
    from
        financial_information 
    where
        id=?
Hibernate: 
    delete 
    from
        card_payments 
    where
        id=?
Hibernate: 
    delete 
    from
        payment_methods 
    where
        id=?
Hibernate: 
    delete 
    from
        ticket_requests 
    where
        id=?
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    delete 
    from
        recipients 
    where
        id=?
Hibernate: 
    delete 
    from
        ticket_types 
    where
        id=?
Hibernate: 
    delete 
    from
        events 
    where
        id=?
Hibernate: 
    delete 
    from
        locations 
    where
        id=?
Hibernate: 
    delete 
    from
        creators 
    where
        id=?
Hibernate: 
    select
        location0_.id as id1_5_0_,
        location0_.address as address2_5_0_,
        location0_.city as city3_5_0_,
        location0_.country as country4_5_0_,
        location0_.created_at as created_5_5_0_,
        location0_.state as state6_5_0_,
        location0_.zipcode as zipcode7_5_0_ 
    from
        locations location0_ 
    where
        location0_.id=?
]]></system-out>
    <system-err><![CDATA[May 20, 2024 6:06:12 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: EventMarketPU-Test]
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.postgresql.Driver] at URL [jdbc:postgresql://localhost:5432/eventmarket_test_db]
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=fernandorochacorreaurbano}
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
May 20, 2024 6:06:12 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect
May 20, 2024 6:06:12 PM org.hibernate.cfg.AnnotationBinder bindClass
WARN: HHH000499: Using @AttributeOverride or @AttributeOverrides in conjunction with entity inheritance is not supported: eventmarket.main.CheckingAccountPayment. The overriding definitions are ignored.
May 20, 2024 6:06:12 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@2d5c95ce] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
May 20, 2024 6:06:12 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@339310b3] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
May 20, 2024 6:06:12 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
May 20, 2024 6:06:12 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:postgresql://localhost:5432/eventmarket_test_db]
]]></system-err>
  </testcase>
</testsuite>